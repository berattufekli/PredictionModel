
// This file was auto-generated by ML.NET Model Builder. 

using ML_PredictionModel;
using System.Globalization;

// Create single instance of sample data from first line of dataset for model input

// Make a single prediction on the sample data and print results


float maeTotal = 0;

float testCount = 0;


using (var reader = new StreamReader(@"C:\Users\berat\Desktop\test_data.csv"))
{
    while (!reader.EndOfStream)
    {
        var line = reader.ReadLine();
        var values = line.Split(',');


        MLModel1.ModelInput sampleData = new MLModel1.ModelInput()
        {
            Input1 = float.Parse(values[0], CultureInfo.InvariantCulture.NumberFormat),
            Input2 = float.Parse(values[1], CultureInfo.InvariantCulture.NumberFormat),
            Input3 = float.Parse(values[2], CultureInfo.InvariantCulture.NumberFormat),
            Input4 = float.Parse(values[3], CultureInfo.InvariantCulture.NumberFormat),
            Input5 = float.Parse(values[4], CultureInfo.InvariantCulture.NumberFormat),
            Input6 = float.Parse(values[5], CultureInfo.InvariantCulture.NumberFormat),
            Input7 = float.Parse(values[6], CultureInfo.InvariantCulture.NumberFormat),
            Input8 = float.Parse(values[7], CultureInfo.InvariantCulture.NumberFormat),
            Input9 = float.Parse(values[8], CultureInfo.InvariantCulture.NumberFormat),
            Input10 = float.Parse(values[9], CultureInfo.InvariantCulture.NumberFormat),
            Input11 = float.Parse(values[10], CultureInfo.InvariantCulture.NumberFormat),
            Input12 = float.Parse(values[11], CultureInfo.InvariantCulture.NumberFormat),
            Input13 = float.Parse(values[12], CultureInfo.InvariantCulture.NumberFormat),
            Input14 = float.Parse(values[13], CultureInfo.InvariantCulture.NumberFormat),
            Input15 = float.Parse(values[14], CultureInfo.InvariantCulture.NumberFormat),
            Input16 = float.Parse(values[15], CultureInfo.InvariantCulture.NumberFormat),
            Input17 = float.Parse(values[16], CultureInfo.InvariantCulture.NumberFormat),
            Input18 = float.Parse(values[17], CultureInfo.InvariantCulture.NumberFormat),
            Input19 = float.Parse(values[18], CultureInfo.InvariantCulture.NumberFormat),
            Input20 = float.Parse(values[19], CultureInfo.InvariantCulture.NumberFormat),
            Input21 = float.Parse(values[20], CultureInfo.InvariantCulture.NumberFormat),
            Input22 = float.Parse(values[21], CultureInfo.InvariantCulture.NumberFormat),
            Input23 = float.Parse(values[22], CultureInfo.InvariantCulture.NumberFormat),
            Input24 = float.Parse(values[23], CultureInfo.InvariantCulture.NumberFormat),
            Input25 = float.Parse(values[24], CultureInfo.InvariantCulture.NumberFormat),
            Input26 = float.Parse(values[25], CultureInfo.InvariantCulture.NumberFormat),
            Input27 = float.Parse(values[26], CultureInfo.InvariantCulture.NumberFormat),
            Input28 = float.Parse(values[27], CultureInfo.InvariantCulture.NumberFormat),
            Input29 = float.Parse(values[28], CultureInfo.InvariantCulture.NumberFormat),
            Input30 = float.Parse(values[29], CultureInfo.InvariantCulture.NumberFormat),
            Input31 = float.Parse(values[30], CultureInfo.InvariantCulture.NumberFormat),
            Input32 = float.Parse(values[31], CultureInfo.InvariantCulture.NumberFormat),
            Input33 = float.Parse(values[32], CultureInfo.InvariantCulture.NumberFormat),
            Input34 = float.Parse(values[33], CultureInfo.InvariantCulture.NumberFormat),
            Input35 = float.Parse(values[34], CultureInfo.InvariantCulture.NumberFormat),
            Input36 = float.Parse(values[35], CultureInfo.InvariantCulture.NumberFormat),
            Input37 = float.Parse(values[36], CultureInfo.InvariantCulture.NumberFormat),
            Input38 = float.Parse(values[37], CultureInfo.InvariantCulture.NumberFormat),
            Input39 = float.Parse(values[38], CultureInfo.InvariantCulture.NumberFormat),
            Input40 = float.Parse(values[39], CultureInfo.InvariantCulture.NumberFormat),
            Input41 = float.Parse(values[40], CultureInfo.InvariantCulture.NumberFormat),
            Input42 = float.Parse(values[41], CultureInfo.InvariantCulture.NumberFormat),
            Input43 = float.Parse(values[42], CultureInfo.InvariantCulture.NumberFormat),
            Input44 = float.Parse(values[43], CultureInfo.InvariantCulture.NumberFormat),
            Input45 = float.Parse(values[44], CultureInfo.InvariantCulture.NumberFormat),
            Input46 = float.Parse(values[45], CultureInfo.InvariantCulture.NumberFormat),
            Input47 = float.Parse(values[46], CultureInfo.InvariantCulture.NumberFormat),
            Input48 = float.Parse(values[47], CultureInfo.InvariantCulture.NumberFormat),
            Input49 = float.Parse(values[48], CultureInfo.InvariantCulture.NumberFormat),
            Input50 = float.Parse(values[49], CultureInfo.InvariantCulture.NumberFormat),
            Input51 = float.Parse(values[50], CultureInfo.InvariantCulture.NumberFormat),
            Input52 = float.Parse(values[51], CultureInfo.InvariantCulture.NumberFormat),
            Input53 = float.Parse(values[52], CultureInfo.InvariantCulture.NumberFormat),
            Input54 = float.Parse(values[53], CultureInfo.InvariantCulture.NumberFormat),
            Input55 = float.Parse(values[54], CultureInfo.InvariantCulture.NumberFormat),
            Input56 = float.Parse(values[55], CultureInfo.InvariantCulture.NumberFormat),
            Input57 = float.Parse(values[56], CultureInfo.InvariantCulture.NumberFormat),
            Input58 = float.Parse(values[57], CultureInfo.InvariantCulture.NumberFormat),
            Input59 = float.Parse(values[58], CultureInfo.InvariantCulture.NumberFormat),
            Input60 = float.Parse(values[59], CultureInfo.InvariantCulture.NumberFormat),
            Input61 = float.Parse(values[60], CultureInfo.InvariantCulture.NumberFormat),
            Input62 = float.Parse(values[61], CultureInfo.InvariantCulture.NumberFormat),
            Input63 = float.Parse(values[62], CultureInfo.InvariantCulture.NumberFormat),
            Input64 = float.Parse(values[63], CultureInfo.InvariantCulture.NumberFormat),
            Input65 = float.Parse(values[64], CultureInfo.InvariantCulture.NumberFormat),
            Input66 = float.Parse(values[65], CultureInfo.InvariantCulture.NumberFormat),
            Input67 = float.Parse(values[66], CultureInfo.InvariantCulture.NumberFormat),
            Input68 = float.Parse(values[67], CultureInfo.InvariantCulture.NumberFormat),
            Input69 = float.Parse(values[68], CultureInfo.InvariantCulture.NumberFormat),
            Input70 = float.Parse(values[69], CultureInfo.InvariantCulture.NumberFormat),
            Input71 = float.Parse(values[70], CultureInfo.InvariantCulture.NumberFormat),
            Input72 = float.Parse(values[71], CultureInfo.InvariantCulture.NumberFormat),
            Input73 = float.Parse(values[72], CultureInfo.InvariantCulture.NumberFormat),
            Input74 = float.Parse(values[73], CultureInfo.InvariantCulture.NumberFormat),
            Input75 = float.Parse(values[74], CultureInfo.InvariantCulture.NumberFormat),
            Input76 = float.Parse(values[75], CultureInfo.InvariantCulture.NumberFormat),
        };


        var predictionResult = MLModel1.Predict(sampleData);

        float actualResult = Math.Abs(float.Parse(values[76], CultureInfo.InvariantCulture.NumberFormat));
        float predictedResult = Math.Abs(predictionResult.Score);

        if (actualResult >= predictedResult)
        {
            maeTotal += actualResult - predictedResult;
            Console.WriteLine("Actual: " + values[76] + " Predicted: " + predictionResult.Score.ToString().Replace(",", ".") + " Difference: " + (actualResult - predictedResult));
        }
        else
        {
            maeTotal += predictedResult - actualResult;
            Console.WriteLine("Actual: " + values[76] + " Predicted: " + predictionResult.Score.ToString().Replace(",", ".") + " Difference: " + (predictedResult - actualResult));
        }
        testCount++;

        
    }
}

Console.WriteLine("MAE: " + maeTotal / testCount);